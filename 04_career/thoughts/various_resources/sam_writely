// --------------------------------------------
// On Engineering Management
// --------------------------------------------
	Moving to management is a choice that com on your interest in managing people. It should not be a choice made for compensation. Many great ICs don’t make great managers.

	Some of the most successful managers & directors choose to move back and forth between IC & managerial roles over time because they love coding. Oftentimes, ICs in the team can earn more than managers. One of Soham’s tests for what makes a good EM is if you are willing to make an offer to somebody in your team that is greater than your compensation.

	Sam’s mental model for the Engineering careers: You first start coding as an IC with 10 fingers, then you move to an EM role with 10 people reporting to you, and eventually, when you move to a senior management role, you have 10 teams reporting into you. The higher up you go, the more comfortable you need to be with being further away from the details.

	* One of the traits of a good Engineering Manager is that they’re able to give very good answers to questions. On the other hand, one of the traits of a good Director is that they know what good questions to ask in the first place.
 
// --------------------------------------------
// On startups and how to choose companies:
// --------------------------------------------
	From a compensation perspective, with large companies paying the way they do, you will likely earn much more over the course of your career working for large companies than joining a startup, early on, that goes on to succeed. This is especially true when you consider the significant variability in start-up success.
	
	Compensation, outsized wealth creation are not good reasons to join a startup. You must really connect with the problem, want to solve it, and be willing to work at it for some time. Sam’s own experience with startups, points to years of not earning anything and then the sale of a few startups; leading to wealth creation.
	
	* Most people tend to look at compensation and things like ‘what is this company doing at large for the world’ and some other factors that are far less meaningful to their daily work.
	The important things to consider include, culture, people that you’ll be working with, and compensation. The day-to-day things you have to go through decide whether you will be successful and happy at your job. Focus on those.
 

// --------------------------------------------
// On perfect code vs launching quickly:
// --------------------------------------------
	Sam says that there is a spectrum like the rainbow when it comes to perfect code. On one end you have absolutely beautifully perfect code and on the other end, you have absolutely atrocious code that keeps breaking. You don’t want to be at either extreme.
		Where you are on this rainbow may depend on factor such as how many customers you have.

	When building a new product or a feature, you want to get it out at a time when you are slightly embarrassed about your code and your code quality. This helps you optimize for speed as well as quality.
 

// --------------------------------------------
// On inventing Google Docs (Writely):
// --------------------------------------------
	There was no clear path or master plan while developing Writely. It happened by constantly iterating and solving a problem that Sam and his team internally faced.

	15 years ago when Writely was founded, the dominant player was Microsoft Word and Microsoft Excel which had significant moats.

	Good Docs (Writely) was a contrarian bet which took years to play out. Even after getting acquired by Google, and after working on Google Docs at Google, many folks believed that there was no opportunity here.

	High levels of conviction are required to drive home a contrarian bet.
 

// --------------------------------------------
// Sam’s framework for innovation:
// --------------------------------------------
	Innovation is never clearly upfront. To innovate don’t look out too far into the future. Look at 'adjacent possibilities.' Stay on the 'edge of what’s possible' where things are slightly uncomfortable.

	When you are at the edge of what’s possible, get into ‘interesting trouble’ by constantly pushing boundaries.

	Keep running cheap experiments, add value, and try to get feedback. When evaluating feedback, if your feedback is in the form of a normalized bell curve then your product is not at all interesting and is unlikely to succeed.

	The nature of successful products is that they are highly polarising. “95% of people will think that you are an absolute moron, while 5% will think that this is the most amazing thing that they have ever come across”. In the beginning, search for ‘small weirdos’ (the 5% of people who are weird enough to love your product).

	When working on consumer innovations, remember consumers are lazy so convenience always wins.
 

// --------------------------------------------
// On having a successful career:
// --------------------------------------------
	* Try to make things better wherever you go and keep adding value to the people around you

	Work on things that you are excited to put a lot of energy behind

	To avoid redundancy / to stay current, keep learning. For example, when Sam started his career, he kept fretting about whether he should focus on ‘Pascal’ or ‘C’. In hindsight, that wasn’t an important question to ask because none of those languages are common today. He had to keep learning new languages as he moved through his career.

	* Curate your attention: Pay attention to what you pay attention to.

	And finally, pick a job/role/team where you almost feel embarrassed about getting paid through that job because you are having so much fun doing it.
 
