// merge of n sorted lists
def merge_n_lists(lsts):
    # queue = FIFO = [ [a, b]=f, c, d ]    
    def merge_2_lists(lst_a, lst_b):        
        len_a, len_b = len(lst_a), len(lst_b)
        result = []
        while i<len_a or j<len_b:
            if i == len_a-1:
                j+= 1
            elif j == len_b-1:
                i += 1
            else: 
                if lst_a[i] < lst_b[j]:
                    result.append(lst_a[i])
                    i += 1
                else:
                    result.append(lst_b[j])
                    j += 1
        return result
    
    results = lsts
    while len(result) > 1: #2
        tmp_results = []
        i, j = 0, len(results)-1 #0, 1
        while i< j:
            tmp_results.append( merge_2_lists(result[i], result[j] ) ) # [ [g] ]
            i += 1 # 1, 2
            j -= 1 # 2, 1
            
        results = tmp_results # [g]
    
    return results

    # How do we choose number of k threads? Ans: number of #CPUS

    # can we do better? 
    #      With a future, we need to sync and append to result

    # Ans: eachthread pulls the work from a queue
    #   Each thread
    #     if queue size ==1
    #         exit
    #     pull 2 arrays
    #     merge_2_lists
    #     queue.append(result_local)

    
